<?php
// $Id$

/**
 * OpenID Simple Registration Extension (SREG)
 * 
 * OpenID Simple Registation is an extension to the OpenID
 * Authentication protocol that allows for very light-weight
 * profile exchange. It is designed to pass eight commonly 
 * requested pieces of information when an End User goes to
 * register a new account with a web service.
 * 
 * Using OpenID Simple Registration Extension 1.1 - Draft 1, 
 * just as core openid.module does
 * See http://openid.net/specs/openid-simple-registration-extension-1_1-01.html
 * 
 * @file
 * OpenID Simple Registration (SREG) implementation for Drupal.
 * 
 * @author
 * Stefan Auditor <stefan.auditor@erdfisch.de>
 * 
 * @todo
 * - Update attributes after authentication
 * - Return only requested attributes
 * - Fieldmapping to Profile and CCK
 * - Requested attributes storage
 * - Tabledrag for administration page
 * - Follow and finish patches for openid_provider
 *   http://drupal.org/project/issues/openid_provider
 */

/**
 * Implementation of hook_perm()
 */
function openid_sreg_perm() {
  return array('access own sreg page', 'edit own sreg page');
}

/**
 * Implementation of hook_menu()
 */
function openid_sreg_menu() {
  $items = array();

  $items['my_openid_sreg'] = array(
    'title' => 'My OpenID Simple Registration',
    'page callback' => 'openid_sreg_profile_page',
    'access arguments' => array('access own sreg page'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'openid_sreg.pages.inc',
  );

  if (module_exists('openid_provider')) {
    // Remove menu item from openid_provider.module
    // see http://drupal.org/node/313848
    $items['admin/settings/openid_provider'] = array();
    
    // Add a new section for OpenID
    $items['admin/openid'] = array(
      'title' => 'OpenID configuration',
      'description' => "Adjust the behaviour of OpenID.",
      'position' => 'left',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('administer openid'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
    );
    
    // Add the previously removed item on a new path
    $items['admin/openid/openid_provider'] = array(
      'title' => 'OpenID Provider',
      'description' => 'Configure settings for the OpenID Provider.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('openid_provider_admin_settings'),
      'access arguments' => array('administer openid'),
      'type' => MENU_NORMAL_ITEM,
    );
    
    // Add our own menu item to the section
    $items['admin/openid/openid_sreg'] = array(
      'title' => 'Simple Registration',
      'description' => 'Configure settings for Simple Registration.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('openid_sreg_admin_settings_form'),
      'access arguments' => array('administer openid'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'openid_sreg.pages.inc',
    );
  }
  else {
    // Alternative menu item in the settings section
    $items['admin/settings/openid_sreg'] = array(
      'title' => 'OpenID Simple Registration',
      'description' => 'Configure settings for Simple Registration.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('openid_sreg_admin_settings_form'),
      'access arguments' => array('administer openid'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'openid_sreg.pages.inc',
    );
  }
  return $items;
}

/**
 * Implementation of hook_openid()
 */
function openid_sreg_openid($op, $response = array(), $request = array()) {
  module_load_include('inc', 'openid_sreg');
  
  switch ($op) {
    case 'request':
      if ($request['openid.mode'] == 'checkid_immediate' || $request['openid.mode'] == 'checkid_setup') {
        $query = openid_sreg_generate_request($request);
        return $query;
      }
      break;
    case 'response':
      // Need to patch openid_provider.module,
      // see http://drupal.org/node/313166
      if ($request['openid.mode'] == 'id_res' AND $response['openid.ns.sreg'] == OPENID_SREG_1_1) {
        // Generate a response
        $query = openid_sreg_generate_response($request, $response);
        return $query;                    
      }
      break;
    case 'signed':
      if ($response['openid.mode'] == 'id_res') {
        // Generate signable keys
        $keys_to_sign = openid_sreg_namespace_keys_extract(array_keys($response));
        return $keys_to_sign;
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter()
 */
function openid_sreg_form_alter(&$form, $form_state, $form_id) {
  static $url = NULL;

  // Provide message with link to consumers policy, in case openid.sreg.policy_url is set 
  if ($form_id == 'openid_provider_form') {
    if (isset($form_state['post']['openid_sreg_policy_url'])) {
      $url = url($form_state['post']['openid_sreg_policy_url'], array('external' => TRUE));
    }
    
    if ($url) {
      $form['openid_sreg'] = array(
        '#prefix' => '<p>',
        '#value' => t('The site requesting authentication provides a !policy.<br />Please carefully read it and do not proceed if you disagree with it.', array('!policy' => l(t('policy'), $url))),
        '#suffix' => '</p>',
        '#weight' => -10,
      );
    }
  }
}

/**
 * Implementation of hook_user()
 */
function openid_sreg_user($op, &$edit, &$account, $category = NULL) {
  static $attributes;
  module_load_include('inc', 'openid_sreg');

  switch ($op) {
    case 'validate':
      if (isset($edit['response']['openid.ns.sreg'])) {
        if ($edit['response']['openid.ns.sreg'] == OPENID_SREG_1_1) {
          // Remember data
          $attributes = $edit['response'];
        }
      }
      break;
    case 'insert':
      openid_sreg_save_attributes($account->uid, $attributes);
      break;
    case 'delete':
      //TODO
      break;
  }
}
